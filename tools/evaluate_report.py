#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Assemble the final HTML report from all intermediate artifacts."""

import argparse
import base64
import json
import math
import sys
from pathlib import Path
from typing import Dict, List, Any


def format_value(value) -> str:
    """Format floats with 6 decimals, keep other types as-is."""
    if isinstance(value, float):
        return "NaN" if math.isnan(value) else f"{value:.6f}"
    return str(value)


def write_html(
    metrics: Dict[str, float],
    scores: Dict[str, float],
    histogram_data_uri: str,
    radar_data_uri: str,
) -> str:
    """Write the final HTML report."""
    # ASCII wiring diagram for the assets placed into the HTML:
    #
    #   metrics dict ----> table (raw metrics)
    #   scores dict  ----> table (scores) ----> radar PNG (base64)
    #   spectrum PNG ----> img tag via data URI
    rows_raw = "".join(
        f"<tr><td>{key}</td><td>{format_value(value)}</td></tr>"
        for key, value in metrics.items()
    )
    rows_scores = "".join(
        f"<tr><td>{key}</td><td>{format_value(value)}</td></tr>"
        for key, value in scores.items()
    )
    html = (
        "<!doctype html>\n"
        "<html lang=\"en\">\n"
        "<head>\n"
        "<meta charset=\"utf-8\">\n"
        "<title>Image Quality Report</title>\n"
        "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n"
        "<style>\n"
        "body{font-family:system-ui,-apple-system,Segoe UI,Roboto,sans-serif;"
        " margin:20px;}\n"
        "h1{margin-top:0}\n"
        "table{border-collapse:collapse;width:100%;max-width:1024px}\n"
        "td,th{border:1px solid #ddd;padding:6px 8px;font-variant-numeric:"
        " tabular-nums;}\n"
        "th{text-align:left;background:#f4f4f4}\n"
        "img{max-width:100%;height:auto;display:block;margin:10px 0;}\n"
        ".flex{display:flex;gap:24px;flex-wrap:wrap}\n"
        ".card{flex:1 1 460px;min-width:320px;}\n"
        "</style>\n"
        "</head>\n"
        "<body>\n"
        "<h1>Image Quality Report</h1>\n"
        "<div class=\"flex\">\n"
        "  <div class=\"card\">\n"
        "    <h2>Scores (0..100)</h2>\n"
        "    <table>\n"
        "      <thead><tr><th>Metric</th><th>Score</th></tr></thead>\n"
        "      <tbody>\n"
        f"        {rows_scores}\n"
        "      </tbody>\n"
        "    </table>\n"
        "  </div>\n"
        "  <div class=\"card\">\n"
        "    <h2>Raw Metrics</h2>\n"
        "    <table>\n"
        "      <thead><tr><th>Metric</th><th>Value</th></tr></thead>\n"
        "      <tbody>\n"
        f"        {rows_raw}\n"
        "      </tbody>\n"
        "    </table>\n"
        "  </div>\n"
        "</div>\n"
        "<h2>Charts</h2>\n"
        "<h3>Radial Power Spectrum</h3>\n"
        f"<img src=\"{histogram_data_uri}\" alt=\"Radial Spectrum\">\n"
        "<h3>Quality Radar (Scores)</h3>\n"
        f"<img src=\"{radar_data_uri}\" alt=\"Quality Radar Scores\">\n"
        "<footer style=\"margin-top:24px;color:#666\">Generated by"
        " the libsixel quality pipeline</footer>\n"
        "</body>\n"
        "</html>\n"
    )
    return html


def decode_png(data_b64: str) -> bytes:
    """Decode a base64 PNG helper (isolated for clarity)."""
    return base64.b64decode(data_b64.encode("ascii"))


def load_json_stream(raw: str) -> List[Any]:
    """Parse successive JSON objects from a raw string buffer."""
    # ASCII layout of the parser scan:
    #
    #   raw text ----> [obj0][obj1][obj2] ... (ndjson-style concatenation)
    decoder = json.JSONDecoder()
    idx = 0
    length = len(raw)
    items: List[Any] = []
    while idx < length:
        while idx < length and raw[idx].isspace():
            idx += 1
        if idx >= length:
            break
        obj, next_idx = decoder.raw_decode(raw, idx)
        items.append(obj)
        idx = next_idx
    return items


def main() -> None:
    parser = argparse.ArgumentParser(
        description=(
            "Combine streamed JSON payloads into a single HTML report."
        )
    )
    parser.add_argument(
        "--output",
        help=(
            "Optional HTML filepath; without this flag the markup is written"
            " to stdout."
        ),
    )
    parser.add_argument(
        "--histogram-output",
        help=(
            "Optional PNG filepath that receives the decoded histogram"
            " image."
        ),
    )
    parser.add_argument(
        "--radar-output",
        help=(
            "Optional PNG filepath that receives the decoded radar"
            " image."
        ),
    )
    args = parser.parse_args()

    raw_input = sys.stdin.read()
    items = load_json_stream(raw_input)

    metrics: Dict[str, float] = {}
    scores: Dict[str, float] = {}
    histogram_b64: str = ""
    radar_b64: str = ""

    for item in items:
        if isinstance(item, dict) and item.get("type") == "scores":
            metrics = item.get("metrics", {})
            scores = item.get("scores", {})
            radar_b64 = item.get("radar_png_base64", "")
        elif isinstance(item, dict) and item.get("type") == "histogram":
            histogram_b64 = item.get("histogram_png_base64", "")
        elif isinstance(item, dict) and not metrics:
            metrics = item

    if not metrics:
        raise RuntimeError("Missing metrics payload in stdin stream")
    if not scores:
        raise RuntimeError("Missing scores payload in stdin stream")
    if not histogram_b64:
        raise RuntimeError("Missing histogram payload in stdin stream")
    if not radar_b64:
        raise RuntimeError("Missing radar payload in stdin stream")

    histogram_bytes = decode_png(histogram_b64)
    radar_bytes = decode_png(radar_b64)

    if args.histogram_output:
        histogram_path = Path(args.histogram_output)
        histogram_path.write_bytes(histogram_bytes)
        print("Wrote:", histogram_path, file=sys.stderr)
    if args.radar_output:
        radar_path = Path(args.radar_output)
        radar_path.write_bytes(radar_bytes)
        print("Wrote:", radar_path, file=sys.stderr)

    histogram_uri = f"data:image/png;base64,{histogram_b64}"
    radar_uri = f"data:image/png;base64,{radar_b64}"
    html = write_html(metrics, scores, histogram_uri, radar_uri)

    if args.output:
        html_path = Path(args.output)
        html_path.write_text(html, encoding="utf-8")
        print("Wrote:", html_path, file=sys.stderr)
    else:
        sys.stdout.write(html)


if __name__ == "__main__":
    main()
