name: libsixel CI (build & test)

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

permissions:
  contents: read

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci-autotools:
    name: Autotools • ${{ matrix.os }} ${{ matrix.sys || 'native' }}
    runs-on: ${{ matrix.runner || matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runner: ubuntu-latest
            sys: x86_64
          - os: ubuntu-latest
            runner: ubuntu-latest
            sys: i686
          - os: macos-latest
            runner: macos-latest
            sys: aarch64
          - os: macos-13
            runner: macos-13
            sys: x86_64
          - os: windows-latest
            runner: windows-latest
            compiler: gcc
            sys: MINGW64
          - os: windows-latest
            runner: windows-latest
            compiler: gcc
            sys: UCRT64
          - os: windows-latest
            runner: windows-latest
            compiler: clang
            sys: CLANG64
          - os: windows-latest
            runner: windows-latest
            compiler: cl
            sys: MSVC
          - os: windows-latest
            runner: windows-latest
            compiler: gcc
            sys: MINGW32
          - os: windows-latest
            runner: windows-latest
            compiler: gcc
            sys: MSYS
          - os: windows-latest
            runner: windows-latest
            compiler: gcc
            sys: CYGWIN

    steps:
    - name: Configure git EOL
      if: runner.os == 'Windows'
      run: git config --global core.autocrlf false

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Normalize line endings (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        git config core.autocrlf false
        git reset --hard

    - name: Install multilib toolchain (Linux i686)
      if: runner.os == 'Linux' && (matrix.sys || '') == 'i686'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib

    - name: Setup MSVC developer env (vcvars)
      if: ${{ runner.os == 'Windows' && matrix.compiler == 'cl' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Setup MSYS2 (Windows, MinGW/UCRT/Clang)
      if: runner.os == 'Windows' && matrix.compiler != 'cl' && matrix.sys != 'MSYS' && matrix.sys != 'CYGWIN'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.sys }}
        update: true
        install: >-
          make
          zip
        pacboy: >-
          cc:p

    - name: Setup MSYS2 (Windows, MSYS gcc)
      if: runner.os == 'Windows' && matrix.sys == 'MSYS' && matrix.compiler == 'gcc'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MSYS
        update: true
        install: >-
          make
          zip
          gcc
          pkgconf

    - name: Setup MSYS2 (Windows, MSVC)
      if: runner.os == 'Windows' && matrix.compiler == 'cl'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MSYS
        update: true
        install: >-
          make
          zip

    - name: Setup Cygwin
      if: runner.os == 'Windows' && matrix.sys == 'CYGWIN'
      uses: cygwin/cygwin-install-action@v4
      with:
        packages: gcc-core,make,zip,pkg-config,python3,python3-pip,ninja

    - name: Configure and build (non-Windows)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        if [ '${{ matrix.sys || '' }}' = 'i686' ]; then
          export CC="gcc -m32"
          export PKG_CONFIG_LIBDIR=/usr/lib/i386-linux-gnu/pkgconfig
          export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig
        fi
        ./configure \
            --without-png \
            --without-jpeg \
            --without-libcurl \
            --without-bashcompletiondir \
            --without-zshcompletiondir \
            --disable-python \
            --enable-debug \
            --enable-tests \
            --disable-dependency-tracking
        make

    - name: Configure and build (Windows, not MSVC/Cygwin)
      if: ${{ runner.os == 'Windows' && matrix.compiler != 'cl' && matrix.sys != 'CYGWIN' }}
      shell: msys2 {0}
      run: |
        ./configure CC=${{ matrix.compiler }} \
            --without-png \
            --without-jpeg \
            --without-libcurl \
            --without-bashcompletiondir \
            --without-zshcompletiondir \
            --disable-python \
            --enable-debug \
            --enable-tests \
            --disable-dependency-tracking
        make

    - name: Configure and build (Windows, Cygwin)
      if: ${{ runner.os == 'Windows' && matrix.sys == 'CYGWIN' }}
      shell: pwsh
      run: |
        $cygwinRoot = 'C:\cygwin'
        if (-not (Test-Path $cygwinRoot)) { $cygwinRoot = 'C:\cygwin64' }
        $workspace = &"$cygwinRoot\bin\cygpath.exe" -u $env:GITHUB_WORKSPACE
        $scriptLines = @(
          'set -eu',
          'set -o pipefail 2>/dev/null || true',
          "export GITHUB_WORKSPACE=`"$workspace`"",
          "cd `"$workspace`"",
          './configure --without-png --without-jpeg --without-libcurl --without-bashcompletiondir --without-zshcompletiondir --disable-python --disable-dependency-tracking',
          'make'
        )
        $script = [string]::Join("`n", $scriptLines)
        &"$cygwinRoot\bin\bash.exe" --login -c $script

    - name: Configure and build (Windows, MSVC)
      if: ${{ runner.os == 'Windows' && matrix.compiler == 'cl' }}
      shell: msys2 {0}
      run: |
        VCVARS="$(cygpath -w "$VSINSTALLDIR")\\VC\\Auxiliary\\Build\\vcvarsall.bat"
        cmd //c call "${VCVARS}" x64 \>nul \&\& set
        eval $(
            cmd //c call "${VCVARS}" x64 \>nul \&\& set |
            grep -i '^\(PATH\|INCLUDE\|LIB\|LIBPATH\)'  |
            while IFS== read -r key val; do
                case "$key" in PATH|Path)
                    echo export PATH=\"$(echo "$val" | tr \; \\n | while read -r p; do cygpath "$p"; done | grep ^/ | tr \\n :)\"\;
                    ;;
                *)
                    echo export "$key"=\""$val"\"\;
                    ;;
                esac;
            done
        )

        chmod +x "$(pwd)/tools/ar-msvc.sh"

        ./configure CC=cl LD=link AR="$(pwd)/tools/ar-msvc.sh" ARFLAGS= NM="dumpbin -symbols" STRIP=: RANLIB=: \
            --host=x86_64-pc-windows-msvc \
            --without-png \
            --without-jpeg \
            --without-libcurl \
            --without-bashcompletiondir \
            --without-zshcompletiondir \
            --disable-python \
            --enable-debug \
            --enable-tests \
            --disable-dependency-tracking
        make

    - name: Run tests (non-Windows)
      if: runner.os != 'Windows'
      shell: bash
      run: make check

    - name: Run tests (Windows, not MSVC/Cygwin)
      if: runner.os == 'Windows' && matrix.compiler != 'cl' && matrix.sys != 'CYGWIN'
      shell: msys2 {0}
      run: make check

    - name: Run tests (Windows, MSVC)
      if: runner.os == 'Windows' && matrix.compiler == 'cl'
      shell: msys2 {0}
      run: |
        VCVARS="$(cygpath -w "$VSINSTALLDIR")\\VC\\Auxiliary\\Build\\vcvarsall.bat"
        cmd //c call "${VCVARS}" x64 \>nul \&\& set
        eval $(
            cmd //c call "${VCVARS}" x64 \>nul \&\& set |
            grep -i '^\(PATH\|INCLUDE\|LIB\|LIBPATH\)'  |
            while IFS== read -r key val; do
                case "$key" in PATH|Path)
                    echo export PATH=\"$(echo "$val" | tr \; \\n | while read -r p; do cygpath "$p"; done | grep ^/ | tr \\n :)\"\;
                    ;;
                *)
                    echo export "$key"=\""$val"\"\;
                    ;;
                esac;
            done
        )
        make check V=1

    - name: Run tests (Windows, Cygwin)
      if: runner.os == 'Windows' && matrix.sys == 'CYGWIN'
      shell: pwsh
      run: |
        $cygwinRoot = 'C:\cygwin'
        if (-not (Test-Path $cygwinRoot)) { $cygwinRoot = 'C:\cygwin64' }
        $workspace = &"$cygwinRoot\bin\cygpath.exe" -u $env:GITHUB_WORKSPACE
        $scriptLines = @(
          'set -eu',
          'set -o pipefail 2>/dev/null || true',
          "export GITHUB_WORKSPACE=`"$workspace`"",
          "cd `"$workspace`"",
          'make check'
        )
        $script = [string]::Join("`n", $scriptLines)
        &"$cygwinRoot\bin\bash.exe" --login -c $script

  ci-autotools-asan:
    name: Autotools ASan • ${{ matrix.os }} clang
    runs-on: ${{ matrix.runner || matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runner: ubuntu-latest
          - os: macos-latest
            runner: macos-latest
          - os: macos-13
            runner: macos-13
          - os: windows-latest
            runner: windows-latest
            sys: CLANG64
    env:
      ASAN_CFLAGS: "-fsanitize=address -O1 -g -fno-omit-frame-pointer"
      ASAN_LDFLAGS: "-fsanitize=address"
    steps:
    - name: Configure git EOL
      if: runner.os == 'Windows'
      run: git config --global core.autocrlf false

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Normalize line endings (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        git config core.autocrlf false
        git reset --hard

    - name: Install clang (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang

    - name: Setup MSYS2 (Windows, clang)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.sys }}
        update: true
        install: >-
          make
          zip
          pkgconf
        pacboy: >-
          cc:p

    - name: Configure and build (ASan, non-Windows)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        CC=clang \
        CFLAGS="$ASAN_CFLAGS" \
        LDFLAGS="$ASAN_LDFLAGS" \
        ./configure \
            --without-png \
            --without-jpeg \
            --without-libcurl \
            --without-bashcompletiondir \
            --without-zshcompletiondir \
            --disable-python \
            --enable-debug \
            --enable-tests \
            --disable-dependency-tracking
        make

    - name: Configure and build (ASan, Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        CC=clang CFLAGS="$ASAN_CFLAGS" LDFLAGS="$ASAN_LDFLAGS" ./configure \
            --without-png \
            --without-jpeg \
            --without-libcurl \
            --without-bashcompletiondir \
            --without-zshcompletiondir \
            --disable-python \
            --enable-debug \
            --enable-tests \
            --disable-dependency-tracking
        make

  ci-meson:
    name: Meson • ${{ matrix.os }} ${{ matrix.sys || 'native' }}
    runs-on: ${{ matrix.runner || matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runner: ubuntu-latest
          - os: ubuntu-latest
            runner: ubuntu-latest
            sys: i686
          - os: macos-latest
            runner: macos-latest
          - os: macos-13
            runner: macos-13
          - os: windows-latest
            runner: windows-latest
            compiler: gcc
            sys: MINGW64
          - os: windows-latest
            runner: windows-latest
            compiler: gcc
            sys: UCRT64
          - os: windows-latest
            runner: windows-latest
            compiler: clang
            sys: CLANG64
          - os: windows-latest
            runner: windows-latest
            compiler: cl
            sys: MSVC
          - os: windows-latest
            runner: windows-latest
            compiler: gcc
            sys: MINGW32
          - os: windows-latest
            runner: windows-latest
            compiler: gcc
            sys: MSYS
#          - os: windows-latest
#            runner: windows-latest
#            compiler: gcc
#            sys: CYGWIN

    steps:
    - name: Configure git EOL
      if: runner.os == 'Windows'
      run: git config --global core.autocrlf false

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Normalize line endings (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        git config core.autocrlf false
        git reset --hard

    - name: Install multilib toolchain (Linux i686)
      if: runner.os == 'Linux' && (matrix.sys || '') == 'i686'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib

    - name: Setup MSVC developer env (vcvars)
      if: ${{ runner.os == 'Windows' && matrix.compiler == 'cl' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Setup MSYS2 (Windows, MinGW/UCRT/Clang)
      if: runner.os == 'Windows' && matrix.compiler != 'cl' && matrix.sys != 'MSYS' && matrix.sys != 'CYGWIN'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.sys }}
        update: true
        install: >-
          python
          ninja
        pacboy: >-
          cc:p
          meson:p
          ninja:p

    - name: Setup MSYS2 (Windows, MSYS gcc)
      if: runner.os == 'Windows' && matrix.sys == 'MSYS' && matrix.compiler == 'gcc'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MSYS
        update: true
        install: >-
          python
          ninja
          meson
          zip
          gcc
          pkgconf

    - name: Setup Cygwin
      if: runner.os == 'Windows' && matrix.sys == 'CYGWIN'
      uses: cygwin/cygwin-install-action@v4
      with:
        packages: gcc-core,make,zip,pkg-config,python3,python3-pip,ninja

    - name: Install Meson (non-Windows)
      if: runner.os != 'Windows'
      run: |
        python3 -m venv .meson-venv
        . .meson-venv/bin/activate
        pip install --upgrade pip
        pip install meson ninja
        echo "$PWD/.meson-venv/bin" >> "$GITHUB_PATH"

    - name: Install Meson (Cygwin)
      if: runner.os == 'Windows' && matrix.sys == 'CYGWIN'
      shell: pwsh
      run: |
        $cygwinRoot = 'C:\cygwin'
        if (-not (Test-Path $cygwinRoot)) { $cygwinRoot = 'C:\cygwin64' }
        $scriptLines = @(
          'set -eu',
          'set -o pipefail 2>/dev/null || true',
          'python3 -m pip install --upgrade pip',
          'python3 -m pip install meson ninja',
          'gp_posix=$(cygpath -u "$GITHUB_PATH")',
          'echo "$HOME/.local/bin" >> "$gp_posix"'
        )
        $script = [string]::Join("`n", $scriptLines)
        &"$cygwinRoot\bin\bash.exe" --login -c $script

    - name: Configure, build, and test (Meson, non-Windows)
      if: runner.os != 'Windows'
      run: |
        if [ '${{ matrix.sys || '' }}' = 'i686' ]; then
          export CC=gcc
          export CFLAGS="-m32"
          export LDFLAGS="-m32"
          export PKG_CONFIG_LIBDIR=/usr/lib/i386-linux-gnu/pkgconfig
          export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig
        fi
        meson setup builddir \
            --wrap-mode=nodownload \
            -Dpng=disabled \
            -Djpeg=disabled \
            -Dcurl=disabled \
            -Dbashcompletiondir= \
            -Dzshcompletiondir= \
            -Dpython=disabled \
            -Dtests=true
        meson compile -C builddir
        meson test -C builddir

    - name: Configure, build, and test (Meson, Windows, not MSVC/Cygwin)
      if: ${{ runner.os == 'Windows' && matrix.compiler != 'cl' && matrix.sys != 'CYGWIN' }}
      shell: msys2 {0}
      run: |
        meson setup builddir \
            --wrap-mode=nodownload \
            --default-library static \
            -Dpng=disabled \
            -Djpeg=disabled \
            -Dcurl=disabled \
            -Dbashcompletiondir= \
            -Dzshcompletiondir= \
            -Dpython=disabled \
            -Dtests=true
        meson compile -C builddir
        meson test -C builddir

    - name: Configure, build, and test (Meson, Windows, Cygwin)
      if: ${{ runner.os == 'Windows' && matrix.sys == 'CYGWIN' }}
      shell: pwsh
      run: |
        $cygwinRoot = 'C:\cygwin'
        if (-not (Test-Path $cygwinRoot)) { $cygwinRoot = 'C:\cygwin64' }
        $workspace = &"$cygwinRoot\bin\cygpath.exe" -u $env:GITHUB_WORKSPACE
        $scriptLines = @(
          'set -eu',
          'set -o pipefail 2>/dev/null || true',
          "export GITHUB_WORKSPACE=`"$workspace`"",
          "cd `"$workspace`"",
          'meson setup builddir --wrap-mode=nodownload --default-library static -Dpng=disabled -Djpeg=disabled -Dcurl=disabled -Dbashcompletiondir= -Dzshcompletiondir= -Dpython=disabled -Dtests=true',
          'meson compile -C builddir',
          'meson test -C builddir -v'
        )
        $script = [string]::Join("`n", $scriptLines)
        &"$cygwinRoot\bin\bash.exe" --login -c $script

    - name: Configure, build, and test (Meson, Windows, MSVC)
      if: ${{ runner.os == 'Windows' && matrix.compiler == 'cl' }}
      shell: cmd
      run: |
        setlocal ENABLEDELAYEDEXPANSION
        call "%VSINSTALLDIR%\VC\Auxiliary\Build\vcvarsall.bat" x64
        python -m pip install --upgrade pip
        python -m pip install meson ninja
        python -m mesonbuild.mesonmain setup builddir ^
            --wrap-mode=nodownload ^
            --default-library static ^
            -Dpng=disabled ^
            -Djpeg=disabled ^
            -Dcurl=disabled ^
            -Dbashcompletiondir= ^
            -Dzshcompletiondir= ^
            -Dpython=disabled ^
            -Dtests=true
        if errorlevel 1 exit /b !errorlevel!
        python -m mesonbuild.mesonmain compile -C builddir
        if errorlevel 1 exit /b !errorlevel!
        python -m mesonbuild.mesonmain test -C builddir -v
        if errorlevel 1 exit /b !errorlevel!
        endlocal

# emacs Local Variables:
# emacs mode: c
# emacs tab-width: 4
# emacs indent-tabs-mode: nil
# emacs c-basic-offset: 4
# emacs End:
# vim: set ft=awk et ts=4 sw=0 sts=-1 fdm=marker fdl=0:
